x-common-env: &fider-env
  ENVIRONMENT: ${env_string}
  # Public Host Name
  BASE_URL: ${base_url}

  # Connection string to the PostgreSQL database
  DATABASE_URL: ${database_url}

  # Generate a secure secret, for example using https://jwtsecret.com
  JWT_SECRET: ${jwt_secret}

  # From which account e-mails will be sent
  EMAIL_NOREPLY: noreply@yourdomain.com

  ###
  # EMAIL
  # Either EMAIL_MAILGUN_* or EMAIL_SMTP_* or EMAIL_AWSSES_* is required
  ###

  # EMAIL_MAILGUN_API: key-yourkeygoeshere
  # EMAIL_MAILGUN_DOMAIN: yourdomain.com
  # EMAIL_MAILGUN_REGION: US

  EMAIL_SMTP_HOST: mailhog
  EMAIL_SMTP_PORT: ${mailhog_smtp_port}
  # EMAIL_SMTP_USERNAME: user@yourdomain.com
  # EMAIL_SMTP_PASSWORD: s0m3p4ssw0rd
  # EMAIL_SMTP_ENABLE_STARTTLS: 'true'

  # EMAIL_AWSSES_REGION: us-east-1
  # EMAIL_AWSSES_ACCESS_KEY_ID: youraccesskeygoeshere
  # EMAIL_AWSSES_SECRET_ACCESS_KEY: yoursecretkeygoeshere  
  LOG_LEVEL: DEBUG
  DISABLE_EMAIL_NOTIFICATIONS: true
  LOG_CONSOLE: true
  LOG_SQL: true
  LOG_FILE: false
  LOG_FILE_OUTPUT: logs/output.log  

  DATABASE_MAX_IDLE_CONNS: 50
  DATABASE_MAX_OPEN_CONNS: 100

x-common-build-args: &common-build-args
  DOCKER_USER_GID: ${DOCKER_USER_GID}
  DOCKER_USER_UID: ${DOCKER_USER_UID}

services:
  fider:
    #image: spicybush/fider-tarkov-community-dev
    build:
      context: ./
      dockerfile: Dockerfile
      args: *common-build-args
    environment: *fider-env
    ports:
      - "${http_port}:3000"  
    hostname: tarkov-community-${env_string}
    #container_name: fider
    restart: always
    networks:
      bw-services:
        aliases:
          - fider
    labels:
      - "USE_PROXY_PROTOCOL=yes"
      - "API_WHITELIST_IP=127.0.0.0/8 10.20.30.0/24"
      - "uat-514894.tarkov.community_USE_BROTLI=yes"
      - "uat-514894.tarkov.community_USE_CLIENT_CACHE=yes"
      - "uat-514894.tarkov.community_USE_REAL_IP=yes"
      - "uat-514894.tarkov.community_BROTLI_COMP_LEVEL=8"
      - "uat-514894.tarkov.community_USE_REVERSE_PROXY=yes"
      - "uat-514894.tarkov.community_REVERSE_PROXY_URL=/"
      - "uat-514894.tarkov.community_REVERSE_PROXY_HOST=http://fider:3011"

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "${mailhog_web_port}:8025"
      - "${mailhog_smtp_port}:1025"
    networks:
      bw-services:
        aliases:
          - fider      
  postgres:
    #container_name: fider_pgdev
    restart: always
    image: postgres:12
    volumes:
      - pgdev-data:/var/lib/postgresql/data
    ports:
      - "${postgres_dev_db_port}:5432"
    environment:
      POSTGRES_USER: fider
      POSTGRES_PASSWORD: fider_pw
    networks:
      bw-services:
        aliases:
          - fider      
  pgadmin:
    image: dpage/pgadmin4
    #container_name: pgadmin4
    restart: always
    ports:
      - "${pgadmin_port}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${pgadmin_email}
      PGADMIN_DEFAULT_PASSWORD: ${pgadmin_password}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      bw-services:
        aliases:
          - fider      

  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${cloudflared}
    networks:
      bw-services:
        aliases:
          - fider       
    

  # pgtest:
  #   container_name: fider_pgtest
  #   restart: always
  #   image: postgres:12
  #   ports:
  #     - "${postgres_test_db_port}:5432"
  #   environment:
  #     POSTGRES_USER: fider_test
  #     POSTGRES_PASSWORD: fider_test_pw
  # s3test:
  #   container_name: fider_s3test
  #   restart: always
  #   image: minio/minio:RELEASE.2021-07-27T02-40-15Z
  #   ports:
  #     - "${minio_port}:9000"
  #     - "${minio2_port}:9001"
  #   volumes:
  #     - s3test-data:/data
  #   environment:
  #     MINIO_ACCESS_KEY: s3user
  #     MINIO_SECRET_KEY: s3user-s3cr3t
  #   command: server /data --console-address ":${minio2_port}"

volumes:
  pgdev-data:
  pgadmin-data:
#  s3test-data:

networks:
  bw-services:
    external: true
    name: bw-services
